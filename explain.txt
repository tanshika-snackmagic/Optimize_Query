Q1: What do different columns in the output of EXPLAIN mean? What possible values can those have? What is the meaning of those values?
Ans- Different columns in ther output of EXPLAIN are:-
-> id-An identifier for the SELECT statement that is being analyzed. If the statement
doesn’t include subqueries or unions, the id value is 1 for each row. 
-> select_type- The type of SELECT statement. The SIMPLE value indicates that the statement
doesn’t include subqueries or unions. Other values indicate how the statement
participates in a subquery or union.
-> table- The table being analyzed by the row. If an alias is used for the table name, the
column displays the alias, rather than the actual table name.
-> type- The method used to match rows in different tables when the SELECT statement
joins two or more tables. If ALL is specified, MySQL conducts a full table scan
for each combination of rows from the current table and the joined table. 
-> possible_keys- The indexes that MySQL can use to find rows. If NULL, no indexes can be used.
-> key- The indexes that MySQL actually uses to return rows. If NULL, no indexes are
used.
-> key_len- The length of the index used to retrieve rows. This is most useful in determining
how many parts of a multicolumn index are used. For example, if an index is
made up of two columns that are each configured as CHAR(4) columns and
the key_len column value is 4. The key_len value is NULL if the key value is NULL.
-> ref- The column used in conjunction with the index specified in the key column.
This usually refers to the column referenced in a foreign key. If NULL, no
columns are used.
-> rows- The number of rows that MySQL plans to examine in order to execute the
query. This column is the best indicator of the efficiency of the
column. The more rows that must be examined, the less efficient the query.
-> partitions- The partitions from which records would be matched by the query. The value is NULL for nonpartitioned tables.
-> extra -  Contains more information about the query processing. For example- Using temporary table, 
Using Where condition or using filesort
-> filtered - The filtered column indicates an estimated percentage of table rows that will be filtered by the table condition. 
The maximum value is 100, which means no filtering of rows occurred. Values decreasing from 100 indicate increasing amounts of filtering.

Q2: We use EXPLAIN to optimize slow SQL queries used in our application. 
Lets say we have a comments table in our application that has a foreign key, user_id, referencing to users table. 
EXPLAINing the query that finds all the comments made by a user gives us following result.

mysql> EXPLAIN SELECT * FROM comments WHERE user_id = 41;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1002345 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

mysql> SELECT count(id) FROM comments;

+-----------+
| count(id) |
+-----------+
| 1002345 |
+-----------+
2.1 The value under 'rows' column in the output of EXPLAIN query and SELECT query after it are same. What does it mean?
Ans- The value under 'rows' column in the output of Explain query tells the number of rows scanned to execute the query
 i.e there are 1002345 records in the table that are scanned and in the select query it counts the number of ids in the table
 which is same as the number of rows scanned in the Explain query.

2.2 Is the SELECT query optimal? If no, how do we optimize it?
Ans- No, select query is not optimal. To optimize it, we can create index on columns where 'where' condition is used.
    -> Create Index u_id
    -> on Comments(user_id);

Q3. In Rails world, we have someting called polymorphic associations (http://guides.rubyonrails.org/association_basics.html#polymorphic-associations).
 Lets say in our web application, we can let users comment on photographs and articles. Some of rows in comments table are represented as following:

mysql> SELECT * FROM comments LIMIT 5;

+----+------------------+----------------+---------+
| id | commentable_type | commentable_id | user_id |
+----+------------------+----------------+---------+
| 1 + Article | 1 | 1 |
+----+------------------+----------------+---------+
| 2 + Photo | 1 | 1 |
+----+------------------+----------------+---------+
| 3 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 4 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 5 + Article | 1 | 2 |
+----+------------------+----------------+---------+

When we need to fetch comments of a user on a particular Article or Photo we form a query like:

mysql> EXPLAIN SELECT * FROM comments WHERE commentable_id = 1 AND commentable_type = 'Article' AND user_id = 1;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1000025 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

It seems that we do not have any index on any of the columns. And whole comments table is scanned to fetch those comments.

3.1 We decide to index columns in comments table to optimize the SELECT query. What column(s) will you index in which order?
Ask the exercise creator for a hint if you are confused.

Ans- Columns to index(in order)- User_id, Commentable_id and Commentale_type

Q4:
4.1 EXPLAIN a SELECT query against one of your databases which employs an INNER JOIN between two tables. 
What does the output look like? What does the values under different columns mean? Do you get only one row in EXPLAIN's output?

mysql> Explain select * from Titles inner join Holdings on  Holdings.title=Titles.title;
+----+-------------+----------+------+---------------+-------+---------+---------------------------+------+-------+
| id | select_type | table    | type | possible_keys | key   | key_len | ref                       | rows | Extra |
+----+-------------+----------+------+---------------+-------+---------+---------------------------+------+-------+
|  1 | SIMPLE      | Titles   | ALL  | PRIMARY       | NULL  | NULL    | NULL                      |    5 |       |
|  1 | SIMPLE      | Holdings | ref  | Title         | Title | 62      | multilibrary.Titles.Title |    1 |       |
+----+-------------+----------+------+---------------+-------+---------+---------------------------+------+-------+
2 rows in set (0.00 sec)

4.2 Form the same select query in above question using a subquery instead of a JOIN. What does the EXPLAIN output look like now? 
Which query is better and why?
mysql> Explain select * from Titles where exists (select * from Holdings, Titles where Holdings.title=Titles.title);
+----+-------------+----------+-------+---------------+---------+---------+---------------------------+------+-------------+
| id | select_type | table    | type  | possible_keys | key     | key_len | ref                       | rows | Extra       |
+----+-------------+----------+-------+---------------+---------+---------+---------------------------+------+-------------+
|  1 | PRIMARY     | Titles   | ALL   | NULL          | NULL    | NULL    | NULL                      |    5 |             |
|  2 | SUBQUERY    | Titles   | index | PRIMARY       | PRIMARY | 62      | NULL                      |    5 | Using index |
|  2 | SUBQUERY    | Holdings | ref   | Title         | Title   | 62      | multilibrary.Titles.Title |    1 | Using index |
+----+-------------+----------+-------+---------------+---------+---------+---------------------------+------+-------------+
3 rows in set (0.00 sec)

Select query with join better in this case. As it is scanning less rows and more columns are needed as output. 
